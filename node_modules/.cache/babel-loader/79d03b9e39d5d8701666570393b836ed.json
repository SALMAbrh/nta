{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Bureau\\\\S5\\\\cloud-project\\\\src\\\\components\\\\Reserve.js\";\n/* global gapi, google */ // Informer ESLint que gapi et google sont définis globalement\nimport React, { useEffect, useState } from \"react\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nconst CLIENT_ID = \"100174910445-i34qd8f9l36pipfd4cce62jhm1u3be8h.apps.googleusercontent.com\";\nconst SCOPES = \"https://www.googleapis.com/auth/calendar.events https://www.googleapis.com/auth/calendar\";\nfunction Reserve() {\n  const [events, setEvents] = useState([]); // Événements du calendrier\n  const [error, setError] = useState(null); // Messages d'erreur\n  const [token, setToken] = useState(null); // Token Google\n  const [selectedRoom, setSelectedRoom] = useState(\"\"); // Salle sélectionnée\n  const [availableTimes, setAvailableTimes] = useState([]); // Horaires disponibles\n  const [formData, setFormData] = useState({\n    date: \"\",\n    time: \"\",\n    email: \"\"\n  });\n  const rooms = [{\n    id: \"room10\",\n    name: \"Salle 10\",\n    times: [\"09:00\", \"10:00\", \"11:00\"]\n  }, {\n    id: \"room20\",\n    name: \"Salle 20\",\n    times: [\"12:00\", \"13:00\", \"14:00\"]\n  }];\n\n  // Initialiser Google API et charger les événements\n  useEffect(() => {\n    const initializeGoogleAPI = () => {\n      if (typeof google === \"undefined\") {\n        setTimeout(initializeGoogleAPI, 100);\n        return;\n      }\n      const tokenClient = google.accounts.oauth2.initTokenClient({\n        client_id: CLIENT_ID,\n        scope: SCOPES,\n        callback: response => {\n          if (response.access_token) {\n            console.log(\"Access token reçu :\", response.access_token);\n            setToken(response.access_token);\n            loadEvents(response.access_token);\n          } else {\n            setError(\"Impossible d'obtenir un token Google.\");\n          }\n        }\n      });\n      tokenClient.requestAccessToken();\n    };\n    initializeGoogleAPI();\n  }, []);\n\n  // Charger les événements à partir de Google Calendar\n  const loadEvents = accessToken => {\n    gapi.load(\"client\", () => {\n      gapi.client.init({\n        clientId: CLIENT_ID,\n        scope: SCOPES\n      }).then(() => {\n        return gapi.client.request({\n          path: \"https://www.googleapis.com/calendar/v3/calendars/primary/events\",\n          headers: {\n            Authorization: `Bearer ${accessToken}`\n          }\n        });\n      }).then(response => {\n        const formattedEvents = response.result.items.map(event => ({\n          title: event.summary,\n          start: event.start.dateTime,\n          end: event.end.dateTime\n        }));\n        setEvents(formattedEvents);\n        setError(null); // Réinitialise les erreurs\n      }).catch(error => {\n        var _error$result, _error$result$error;\n        console.error(\"Erreur Google API :\", error);\n        const errorMessage = ((_error$result = error.result) === null || _error$result === void 0 ? void 0 : (_error$result$error = _error$result.error) === null || _error$result$error === void 0 ? void 0 : _error$result$error.message) || \"Erreur inconnue.\";\n        setError(`Impossible de charger les événements : ${errorMessage}`);\n      });\n    });\n  };\n\n  // Ajouter une réservation à Google Calendar\n  const addReservationToGoogleCalendar = reservation => {\n    if (!token) {\n      setError(\"Vous devez être connecté pour ajouter une réservation.\");\n      return;\n    }\n    gapi.client.request({\n      path: \"https://www.googleapis.com/calendar/v3/calendars/primary/events\",\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        summary: `Salle ${reservation.room_id} - Réservé par ${reservation.email}`,\n        start: {\n          dateTime: reservation.start_time,\n          timeZone: \"UTC\"\n        },\n        end: {\n          dateTime: reservation.end_time,\n          timeZone: \"UTC\"\n        }\n      })\n    }).then(() => {\n      alert(\"Réservation confirmée et ajoutée au Google Calendar.\");\n      loadEvents(token); // Recharge les événements pour synchroniser\n    }).catch(error => {\n      console.error(\"Erreur lors de l'ajout de la réservation :\", error);\n      setError(\"Impossible d'ajouter la réservation.\");\n    });\n  };\n  const handleRoomChange = e => {\n    const room = rooms.find(r => r.id === e.target.value);\n    setSelectedRoom(room.id);\n    setAvailableTimes(room.times);\n  };\n  const handleReservation = e => {\n    e.preventDefault();\n    const newReservation = {\n      room_id: selectedRoom,\n      email: formData.email,\n      start_time: `${formData.date}T${formData.time}:00`,\n      end_time: `${formData.date}T${parseInt(formData.time.split(\":\")[0]) + 1}:00:00`\n    };\n\n    // Ajouter directement à Google Calendar\n    addReservationToGoogleCalendar(newReservation);\n\n    // Réinitialiser le formulaire\n    setFormData({\n      date: \"\",\n      time: \"\",\n      email: \"\"\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, \"R\\xE9servations de salles\"), error && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }, error), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => loadEvents(token),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 11\n    }\n  }, \"R\\xE9essayer\")), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleReservation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, \"Salle : \"), /*#__PURE__*/React.createElement(\"select\", {\n    onChange: handleRoomChange,\n    value: selectedRoom,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }, \"S\\xE9lectionnez une salle\"), rooms.map(room => /*#__PURE__*/React.createElement(\"option\", {\n    key: room.id,\n    value: room.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }\n  }, room.name))), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }, \"Date : \"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"date\",\n    value: formData.date,\n    onChange: e => setFormData({\n      ...formData,\n      date: e.target.value\n    }),\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }, \"Heure : \"), /*#__PURE__*/React.createElement(\"select\", {\n    value: formData.time,\n    onChange: e => setFormData({\n      ...formData,\n      time: e.target.value\n    }),\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 11\n    }\n  }, \"S\\xE9lectionnez une heure\"), availableTimes.map(time => /*#__PURE__*/React.createElement(\"option\", {\n    key: time,\n    value: time,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }\n  }, time))), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }, \"Email : \"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"email\",\n    value: formData.email,\n    onChange: e => setFormData({\n      ...formData,\n      email: e.target.value\n    }),\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }, \"R\\xE9server\")), /*#__PURE__*/React.createElement(FullCalendar, {\n    plugins: [dayGridPlugin, interactionPlugin],\n    initialView: \"dayGridMonth\",\n    events: events,\n    headerToolbar: {\n      left: \"prev,next today\",\n      center: \"title\",\n      right: \"dayGridMonth,dayGridWeek,dayGridDay\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }\n  }));\n}\nexport default Reserve;","map":{"version":3,"names":["React","useEffect","useState","FullCalendar","dayGridPlugin","interactionPlugin","CLIENT_ID","SCOPES","Reserve","events","setEvents","error","setError","token","setToken","selectedRoom","setSelectedRoom","availableTimes","setAvailableTimes","formData","setFormData","date","time","email","rooms","id","name","times","initializeGoogleAPI","google","setTimeout","tokenClient","accounts","oauth2","initTokenClient","client_id","scope","callback","response","access_token","console","log","loadEvents","requestAccessToken","accessToken","gapi","load","client","init","clientId","then","request","path","headers","Authorization","formattedEvents","result","items","map","event","title","summary","start","dateTime","end","catch","_error$result","_error$result$error","errorMessage","message","addReservationToGoogleCalendar","reservation","method","body","JSON","stringify","room_id","start_time","timeZone","end_time","alert","handleRoomChange","e","room","find","r","target","value","handleReservation","preventDefault","newReservation","parseInt","split","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","style","color","onClick","onSubmit","onChange","required","disabled","key","type","plugins","initialView","headerToolbar","left","center","right"],"sources":["C:/Users/DELL/OneDrive/Bureau/S5/cloud-project/src/components/Reserve.js"],"sourcesContent":["/* global gapi, google */ // Informer ESLint que gapi et google sont définis globalement\r\nimport React, { useEffect, useState } from \"react\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\n\r\nconst CLIENT_ID = \"100174910445-i34qd8f9l36pipfd4cce62jhm1u3be8h.apps.googleusercontent.com\";\r\nconst SCOPES = \"https://www.googleapis.com/auth/calendar.events https://www.googleapis.com/auth/calendar\";\r\n\r\nfunction Reserve() {\r\n  const [events, setEvents] = useState([]); // Événements du calendrier\r\n  const [error, setError] = useState(null); // Messages d'erreur\r\n  const [token, setToken] = useState(null); // Token Google\r\n  const [selectedRoom, setSelectedRoom] = useState(\"\"); // Salle sélectionnée\r\n  const [availableTimes, setAvailableTimes] = useState([]); // Horaires disponibles\r\n  const [formData, setFormData] = useState({\r\n    date: \"\",\r\n    time: \"\",\r\n    email: \"\",\r\n  });\r\n\r\n  const rooms = [\r\n    { id: \"room10\", name: \"Salle 10\", times: [\"09:00\", \"10:00\", \"11:00\"] },\r\n    { id: \"room20\", name: \"Salle 20\", times: [\"12:00\", \"13:00\", \"14:00\"] },\r\n  ];\r\n\r\n  // Initialiser Google API et charger les événements\r\n  useEffect(() => {\r\n    const initializeGoogleAPI = () => {\r\n      if (typeof google === \"undefined\") {\r\n        setTimeout(initializeGoogleAPI, 100);\r\n        return;\r\n      }\r\n      const tokenClient = google.accounts.oauth2.initTokenClient({\r\n        client_id: CLIENT_ID,\r\n        scope: SCOPES,\r\n        callback: (response) => {\r\n          if (response.access_token) {\r\n            console.log(\"Access token reçu :\", response.access_token);\r\n            setToken(response.access_token);\r\n            loadEvents(response.access_token);\r\n          } else {\r\n            setError(\"Impossible d'obtenir un token Google.\");\r\n          }\r\n        },\r\n      });\r\n\r\n      tokenClient.requestAccessToken();\r\n    };\r\n\r\n    initializeGoogleAPI();\r\n  }, []);\r\n\r\n  // Charger les événements à partir de Google Calendar\r\n  const loadEvents = (accessToken) => {\r\n    gapi.load(\"client\", () => {\r\n      gapi.client\r\n        .init({\r\n          clientId: CLIENT_ID,\r\n          scope: SCOPES,\r\n        })\r\n        .then(() => {\r\n          return gapi.client.request({\r\n            path: \"https://www.googleapis.com/calendar/v3/calendars/primary/events\",\r\n            headers: {\r\n              Authorization: `Bearer ${accessToken}`,\r\n            },\r\n          });\r\n        })\r\n        .then((response) => {\r\n          const formattedEvents = response.result.items.map((event) => ({\r\n            title: event.summary,\r\n            start: event.start.dateTime,\r\n            end: event.end.dateTime,\r\n          }));\r\n          setEvents(formattedEvents);\r\n          setError(null); // Réinitialise les erreurs\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Erreur Google API :\", error);\r\n          const errorMessage = error.result?.error?.message || \"Erreur inconnue.\";\r\n          setError(`Impossible de charger les événements : ${errorMessage}`);\r\n        });\r\n    });\r\n  };\r\n\r\n  // Ajouter une réservation à Google Calendar\r\n  const addReservationToGoogleCalendar = (reservation) => {\r\n    if (!token) {\r\n      setError(\"Vous devez être connecté pour ajouter une réservation.\");\r\n      return;\r\n    }\r\n\r\n    gapi.client\r\n      .request({\r\n        path: \"https://www.googleapis.com/calendar/v3/calendars/primary/events\",\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({\r\n          summary: `Salle ${reservation.room_id} - Réservé par ${reservation.email}`,\r\n          start: { dateTime: reservation.start_time, timeZone: \"UTC\" },\r\n          end: { dateTime: reservation.end_time, timeZone: \"UTC\" },\r\n        }),\r\n      })\r\n      .then(() => {\r\n        alert(\"Réservation confirmée et ajoutée au Google Calendar.\");\r\n        loadEvents(token); // Recharge les événements pour synchroniser\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Erreur lors de l'ajout de la réservation :\", error);\r\n        setError(\"Impossible d'ajouter la réservation.\");\r\n      });\r\n  };\r\n\r\n  const handleRoomChange = (e) => {\r\n    const room = rooms.find((r) => r.id === e.target.value);\r\n    setSelectedRoom(room.id);\r\n    setAvailableTimes(room.times);\r\n  };\r\n\r\n  const handleReservation = (e) => {\r\n    e.preventDefault();\r\n\r\n    const newReservation = {\r\n      room_id: selectedRoom,\r\n      email: formData.email,\r\n      start_time: `${formData.date}T${formData.time}:00`,\r\n      end_time: `${formData.date}T${parseInt(formData.time.split(\":\")[0]) + 1}:00:00`,\r\n    };\r\n\r\n    // Ajouter directement à Google Calendar\r\n    addReservationToGoogleCalendar(newReservation);\r\n\r\n    // Réinitialiser le formulaire\r\n    setFormData({ date: \"\", time: \"\", email: \"\" });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Réservations de salles</h1>\r\n      {error && (\r\n        <div style={{ color: \"red\" }}>\r\n          <p>{error}</p>\r\n          <button onClick={() => loadEvents(token)}>Réessayer</button>\r\n        </div>\r\n      )}\r\n\r\n      <form onSubmit={handleReservation}>\r\n        <label>Salle : </label>\r\n        <select onChange={handleRoomChange} value={selectedRoom} required>\r\n          <option value=\"\" disabled>\r\n            Sélectionnez une salle\r\n          </option>\r\n          {rooms.map((room) => (\r\n            <option key={room.id} value={room.id}>\r\n              {room.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <label>Date : </label>\r\n        <input\r\n          type=\"date\"\r\n          value={formData.date}\r\n          onChange={(e) => setFormData({ ...formData, date: e.target.value })}\r\n          required\r\n        />\r\n        <label>Heure : </label>\r\n        <select\r\n          value={formData.time}\r\n          onChange={(e) => setFormData({ ...formData, time: e.target.value })}\r\n          required\r\n        >\r\n          <option value=\"\" disabled>\r\n            Sélectionnez une heure\r\n          </option>\r\n          {availableTimes.map((time) => (\r\n            <option key={time} value={time}>\r\n              {time}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <label>Email : </label>\r\n        <input\r\n          type=\"email\"\r\n          value={formData.email}\r\n          onChange={(e) => setFormData({ ...formData, email: e.target.value })}\r\n          required\r\n        />\r\n        <button type=\"submit\">Réserver</button>\r\n      </form>\r\n\r\n      <FullCalendar\r\n        plugins={[dayGridPlugin, interactionPlugin]}\r\n        initialView=\"dayGridMonth\"\r\n        events={events}\r\n        headerToolbar={{\r\n          left: \"prev,next today\",\r\n          center: \"title\",\r\n          right: \"dayGridMonth,dayGridWeek,dayGridDay\",\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Reserve;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}